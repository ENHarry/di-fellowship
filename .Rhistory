team1_ftpct, team1_blockpct, team1_ap_final)]
madness_team1 <- data[,.(team1_id, team1_fg2pct, team1_fg3pct,
team1_ftpct, team1_blockpct, team1_ap_final)]
madness_team1 <- data2[,.(team1_id, team1_fg2pct, team1_fg3pct,
team1_ftpct, team1_blockpct, team1_ap_final)]
View(madness_team1)
madness_team2 <- data2[,.(team2_id, team2_fg2pct, team2_fg3pct,
team2_ftpct, team2_blockpct, team2_ap_final)]
View(madness_team2)
madness_team1[,c("team1_ap_final")] <- apply(madness_team1[,c("team1_ap_final")], 1,
function(x){replace(x, is.na(x), 0)})
replace(x, is.na(madness_team1$team1_ap_final), 0)
replace(madness_team1$team1_ap_final, is.na(madness_team1$team1_ap_final), 0)
View(madness_team1)
madness_team$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
madness_team1$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
View(madness_team1)
madness_team2$team2_ap_final <- replace(madness_team2$team2_ap_final,
is.na(madness_team2$team2_ap_final), 0)
View(madness_team2)
team1_top24 <- madness_team1 %>%
filter(team1_ap_final > 0)
View(team1_top24)
team2_top24 <- madness_team2 %>%
filter(team2_ap_final > 0)
View(team1_top24)
names(team1_top24)[names(team1_top24) == "team1_id"] = "team_id"
names(team2_top24)[names(team2_top24) == "team2_id"] = "team_id"
View(team2_top24)
team1_top24 <- madness_team1 %>%
filter(team1_ap_final > 0)
team2_top24 <- madness_team2 %>%
filter(team2_ap_final > 0)
View(team1_top24)
setnames(team1_top24, old = c('team1_id', 'team1_fg2pct', 'team1_fg3pct',
'team1_ftpct', 'team1_blockpct', 'team1_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
View(team1_top24)
View(data2)
madness_team1 <- data2[,.(season, team1_id, team1_fg2pct, team1_fg3pct,
team1_ftpct, team1_blockpct, team1_ap_final)]
madness_team2 <- data2[,.(season, team2_id, team2_fg2pct, team2_fg3pct,
team2_ftpct, team2_blockpct, team2_ap_final)]
madness_team1$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
madness_team2$team2_ap_final <- replace(madness_team2$team2_ap_final,
is.na(madness_team2$team2_ap_final), 0)
team1_top24 <- madness_team1 %>%
filter(team1_ap_final > 0)
team2_top24 <- madness_team2 %>%
filter(team2_ap_final > 0)
setnames(team1_top24, old = c('team1_id', 'team1_fg2pct', 'team1_fg3pct',
'team1_ftpct', 'team1_blockpct', 'team1_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
View(team1_top24)
setnames(team2_top24, old = c('team2_id', 'team2_fg2pct', 'team2_fg3pct',
'team2_ftpct', 'team2_blockpct', 'team2_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
View(team2_top24)
# Filter out teams that failed to make the rank
team1_top25 <- madness_team1 %>%
filter(team1_ap_final > 0)
team2_top25 <- madness_team2 %>%
filter(team2_ap_final > 0)
# rename team1_id and team2_id to team_id and merge both datasets
setnames(team1_top25, old = c('team1_id', 'team1_fg2pct', 'team1_fg3pct',
'team1_ftpct', 'team1_blockpct', 'team1_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
setnames(team2_top25, old = c('team2_id', 'team2_fg2pct', 'team2_fg3pct',
'team2_ftpct', 'team2_blockpct', 'team2_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
team1_top25 <- madness_team1 %>%
filter(team1_ap_final > 0)
team2_top25 <- madness_team2 %>%
filter(team2_ap_final > 0)
data2 <- read.csv("./March_Madness_data.csv", header = T, sep = ",")
class(data2)
data2 <- data.table(data2)
library(data.table)
library(dplyr)
library(caret)
# Break data into team 1 and 2 sets
madness_team1 <- data2[,.(season, team1_id, team1_fg2pct, team1_fg3pct,
team1_ftpct, team1_blockpct, team1_ap_final)]
madness_team2 <- data2[,.(season, team2_id, team2_fg2pct, team2_fg3pct,
team2_ftpct, team2_blockpct, team2_ap_final)]
# Replace all NA values with 0 in the ap_finAL rank. The only relevant ranks
# are from 1 to 25
madness_team1$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
madness_team2$team2_ap_final <- replace(madness_team2$team2_ap_final,
is.na(madness_team2$team2_ap_final), 0)
# Filter out teams that failed to make the rank
team1_top25 <- madness_team1 %>%
filter(team1_ap_final > 0)
team2_top25 <- madness_team2 %>%
filter(team2_ap_final > 0)
# rename team1_id and team2_id to team_id and merge both datasets
setnames(team1_top25, old = c('team1_id', 'team1_fg2pct', 'team1_fg3pct',
'team1_ftpct', 'team1_blockpct', 'team1_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
setnames(team2_top25, old = c('team2_id', 'team2_fg2pct', 'team2_fg3pct',
'team2_ftpct', 'team2_blockpct', 'team2_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
View(team1_top25)
View(team2_top25)
top25 <- rbind(team1_top25, team2_top25)
View(data2)
team1_top25 <- madness_team1 %>%
filter(team1_ap_final >= 1)
team2_top25 <- madness_team2 %>%
filter(team2_ap_final >= 1)
team1_top25 <- madness_team1 %>%
filter(team1_ap_final >= 1)
madness_team1$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
madness_team2$team2_ap_final <- replace(madness_team2$team2_ap_final,
is.na(madness_team2$team2_ap_final), 0)
data2 <- read.csv("./March_Madness_data.csv", header = T, sep = ",")
class(data2)
data2 <- data.table(data2)
library(data.table)
library(dplyr)
library(caret)
# Break data into team 1 and 2 sets
madness_team1 <- data2[,.(season, team1_id, team1_fg2pct, team1_fg3pct,
team1_ftpct, team1_blockpct, team1_ap_final)]
madness_team2 <- data2[,.(season, team2_id, team2_fg2pct, team2_fg3pct,
team2_ftpct, team2_blockpct, team2_ap_final)]
# Replace all NA values with 0 in the ap_finAL rank. The only relevant ranks
# are from 1 to 25
madness_team1$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
madness_team2$team2_ap_final <- replace(madness_team2$team2_ap_final,
is.na(madness_team2$team2_ap_final), 0)
# Filter out teams that failed to make the rank
team1_top25 <- madness_team1 %>%
filter(team1_ap_final >= 1)
team2_top25 <- madness_team2 %>%
filter(team2_ap_final >= 1)
# rename team1_id and team2_id to team_id and merge both datasets
setnames(team1_top25, old = c('team1_id', 'team1_fg2pct', 'team1_fg3pct',
'team1_ftpct', 'team1_blockpct', 'team1_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
setnames(team2_top25, old = c('team2_id', 'team2_fg2pct', 'team2_fg3pct',
'team2_ftpct', 'team2_blockpct', 'team2_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
top25 <- rbind(team1_top25, team2_top25)
View(top25)
annual <- top25 %>%
group_by(season)
View(annual)
annual <- top25 %>%
group_by(season) %>%
distinct(ranking)
View(annual)
?group_by
?distinct
annual <- top25 %>%
group_by(team_id,season) %>%
unique([,1:7])
annual <- top25 %>%
group_by(team_id,season)
annual <- unique(annual)
View(annual)
annual <- top25 %>%
group_by(team_id,season)%>%
order_by(ranking)
?order_by()
annual <- top25 %>%
group_by(team_id,season)%>%
order_by(ranking, 1:25)
annual <- top25 %>%
group_by(team_id,season)%>%
with_order(ranking)
annual[order(annual$ranking),]
?arrange
annual <- top25 %>%
group_by(team_id,season)%>%
arrange(season, team_id, asc(ranking), fg2pct, fg3pct,
ftpct, blockpct)
annual <- top25 %>%
group_by(team_id,season)%>%
arrange(season, team_id, desc(ranking), fg2pct, fg3pct,
ftpct, blockpct)
View(annual)
annual <- top25 %>%
group_by(team_id,season)%>%
arrange(season, team_id, desc(ranking), fg2pct, fg3pct,
ftpct, blockpct)%>%
distinct(season, team_id, ranking, fg2pct, fg3pct,
ftpct, blockpct)
annual <- top25 %>%
group_by(team_id,season)%>%
arrange((ranking))%>%
distinct(season, team_id, ranking, fg2pct, fg3pct,
ftpct, blockpct)
data2 <- read.csv("./March_Madness_data.csv", header = T, sep = ",")
class(data2)
data2 <- data.table(data2)
library(data.table)
library(dplyr)
library(caret)
# Break data into team 1 and 2 sets
madness_team1 <- data2[,.(season, team1_id, team1_fg2pct, team1_fg3pct,
team1_ftpct, team1_blockpct, team1_ap_final)]
madness_team2 <- data2[,.(season, team2_id, team2_fg2pct, team2_fg3pct,
team2_ftpct, team2_blockpct, team2_ap_final)]
# Replace all NA values with 0 in the ap_finAL rank. The only relevant ranks
# are from 1 to 25
madness_team1$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
madness_team2$team2_ap_final <- replace(madness_team2$team2_ap_final,
is.na(madness_team2$team2_ap_final), 0)
# Filter out teams that failed to make the rank
team1_top25 <- madness_team1 %>%
filter(team1_ap_final >= 1)
team2_top25 <- madness_team2 %>%
filter(team2_ap_final >= 1)
# rename team1_id and team2_id to team_id and merge both datasets
setnames(team1_top25, old = c('team1_id', 'team1_fg2pct', 'team1_fg3pct',
'team1_ftpct', 'team1_blockpct', 'team1_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
setnames(team2_top25, old = c('team2_id', 'team2_fg2pct', 'team2_fg3pct',
'team2_ftpct', 'team2_blockpct', 'team2_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
top25 <- rbind(team1_top25, team2_top25)
annual <- top25 %>%
group_by(team_id,season)%>%
arrange((ranking))%>%
distinct(season, team_id, ranking, fg2pct, fg3pct,
ftpct, blockpct)
View(annual)
annual <- top25 %>%
group_by(team_id,season)%>%
distinct(season, team_id, ranking, fg2pct, fg3pct,
ftpct, blockpct)
View(annual)
data2 <- read.csv("./March_Madness_data.csv", header = T, sep = ",")
class(data2)
data2 <- data.table(data2)
library(data.table)
library(dplyr)
library(caret)
# Break data into team 1 and 2 sets
madness_team1 <- data2[,.(season, team1_id, team1_fg2pct, team1_fg3pct,
team1_ftpct, team1_blockpct, team1_ap_final)]
madness_team2 <- data2[,.(season, team2_id, team2_fg2pct, team2_fg3pct,
team2_ftpct, team2_blockpct, team2_ap_final)]
# Replace all NA values with 0 in the ap_finAL rank. The only relevant ranks
# are from 1 to 25
madness_team1$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
madness_team2$team2_ap_final <- replace(madness_team2$team2_ap_final,
is.na(madness_team2$team2_ap_final), 0)
# Filter out teams that failed to make the rank
team1_top25 <- madness_team1 %>%
filter(team1_ap_final >= 1)
team2_top25 <- madness_team2 %>%
filter(team2_ap_final >= 1)
# rename team1_id and team2_id to team_id and merge both datasets
setnames(team1_top25, old = c('team1_id', 'team1_fg2pct', 'team1_fg3pct',
'team1_ftpct', 'team1_blockpct', 'team1_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
setnames(team2_top25, old = c('team2_id', 'team2_fg2pct', 'team2_fg3pct',
'team2_ftpct', 'team2_blockpct', 'team2_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
top25 <- rbind(team1_top25, team2_top25)
# group the data table by year and ensure there is no duplicate data
annual <- top25 %>%
group_by(team_id,season)%>%
distinct(season, team_id, ranking, fg2pct, fg3pct,
ftpct, blockpct)
annual <- top25 %>%
group_by(season)%>%
distinct(season, team_id, ranking, fg2pct, fg3pct,
ftpct, blockpct)
View(annual)
annual <- top25 %>%
group_by(season)%>%
distinct(team_id, ranking, fg2pct, fg3pct,
ftpct, blockpct)
View(annual)
annual <- top25 %>%
group_by(season, team_id)%>%
distinct(team_id, ranking, fg2pct, fg3pct,
ftpct, blockpct)
annual <- top25 %>%
group_by(season, team_id)%>%
distinct(ranking, fg2pct, fg3pct,
ftpct, blockpct)
View(annual)
library(ggvis)
install.packages("ggvis")
library(ggvis)
Plot1 <- annual %>%
ggvis(~ranking, ~season, fill = ~team_id) %>%
layer_points()
Plot1
Plot1 <- annual %>%
ggvis(~season, ~ranking, fill = ~team_id) %>%
layer_points()
Plot1
Plot1 <- annual %>%
ggvis(~season, ~team_id, fill = ~ranking) %>%
layer_points()
Plot1
library(ggplot2)
library(gridExtra)
p1 <- ggplot(annual, aes(x = season, y = team_id))+ geom_point(aes(color=factor(ranking)))
p1
plot1 <- ggplot(annual, aes(x = season, y = team_id))+ geom_point(aes(color=factor(ranking)))
annual <- top25 %>%
group_by(season, team_id)%>%
distinct(ranking, fg2pct, fg3pct,
ftpct, blockpct) %>%
mutate(avg_shooting_percentage = (fg2pct + fg3pct + ftpct)/3)
View(annual)
plot2 <- ggplot(annual, aes(x = season, y = team_id))+
geom_point(aes(color=factor(avg_shooting_percentage)))
plot2
plot2 <- ggplot(annual, aes(x = avg_shooting_percentage, y = team_id))+
geom_point(aes(color=factor(ranking)))
plot2
?sd
annual$team_id <- as.factor(annual$team_id)
preProcValues <- preProcess(annual, method = c("center", "scale"))
building <- predict(preProcValues, annual)
inTrain <- createDataPartition(y=building$team_id, p=0.7, list=FALSE)
training <- building[inTrain,]; testing <- building[-inTrain,]
annual <- top25 %>%
group_by(season, team_id)%>%
distinct(ranking, fg2pct, fg3pct,
ftpct, blockpct) %>%
mutate(avg_shooting_percentage = (fg2pct + fg3pct + ftpct)/3)
annual$ranking <- as.factor(annual$ranking)
preProcValues <- preProcess(annual, method = c("center", "scale"))
building <- predict(preProcValues, annual)
inTrain <- createDataPartition(y=building$ranking, p=0.7, list=FALSE)
training <- building[inTrain,]; testing <- building[-inTrain,]
require(gbm); require(randomForest);
set.seed(4400)
mod1 <- train(ranking ~.,method="rf",data=training, metric = "Accuracy",
trControl = trainControl(method = "cv"), number=5)
mod2 <- train(ranking ~.,method="gbm",data=training)
mod3 <- train(ranking ~.,method="RRF",data=training)
pred1 <- predict(mod1, testing); pred2 <- predict(mod2, testing);
pred3 <- predict(mod3, testing
)
predDF <- data.frame(pred1,pred2,pred3,ranking=testing$ranking)
set.seed(23465)
combModFit <- train(ranking ~.,method="gbm",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(pred1, testing$ranking)
confusionMatrix(pred2, testing$ranking)
confusionMatrix(pred3, testing$ranking)
confusionMatrix(combPred, testing$ranking)
?train
set.seed(4400)
mod1 <- train(ranking ~.,method="rf",data=training, metric = "Accuracy",
trControl = trainControl(method = "cv"), number=5)
mod2 <- train(ranking ~.,method="glmboost",data=training)
mod2 <- train(ranking ~.,method="glm",data=training)
mod2 <- train(ranking ~.,method="ada",data=training)
mod2 <- train(ranking ~.,method="rpart",data=training)
mod3 <- train(ranking ~.,method="svm",data=training)
mod3 <- train(ranking ~.,method="fda",data=training)
pred1 <- predict(mod1, testing); pred2 <- predict(mod2, testing);
pred3 <- predict(mod3, testing)
predDF <- data.frame(pred1,pred2,pred3,ranking=testing$ranking)
set.seed(23465)
combModFit <- train(ranking ~.,method="rpart",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(pred1, testing$ranking)
confusionMatrix(pred2, testing$ranking)
confusionMatrix(pred3, testing$ranking)
confusionMatrix(combPred, testing$ranking)
annual2 <- annual[,(team_id, ranking, season, avg_shooting_percentage, blockpct)]
annual2 <- annual[,c('team_id', 'ranking', 'season',
'avg_shooting_percentage', 'blockpct')]
annual2$season <- as.factor(annual2$season)
annual2$ranking <- as.factor(annual2$ranking)
preProcValues <- preProcess(annual2, method = c("center", "scale"))
building <- predict(preProcValues, annual2)
inTrain <- createDataPartition(y=building$ranking, p=0.7, list=FALSE)
training <- building[inTrain,]; testing <- building[-inTrain,]
require(randomForest);
set.seed(4400)
mod1 <- train(ranking ~.,method="rf",data=training, metric = "Accuracy",
trControl = trainControl(method = "cv"), number=5)
mod2 <- train(ranking ~.,method="rpart",data=training)
mod3 <- train(ranking ~.,method="fda",data=training)
mod3 <- train(ranking ~.,method="lm",data=training)
mod3 <- train(ranking ~.,method="gbm",data=training)
pred1 <- predict(mod1, testing); pred2 <- predict(mod2, testing);
pred3 <- predict(mod3, testing)
predDF <- data.frame(pred1,pred2,pred3,ranking=testing$ranking)
set.seed(23465)
combModFit <- train(ranking ~.,method="rpart",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(pred1, testing$ranking)
confusionMatrix(pred2, testing$ranking)
confusionMatrix(pred3, testing$ranking)
confusionMatrix(combPred, testing$ranking)
plot1
plot2
---
title: "PRoject"
author: "Emi Harry"
date: "October 31, 2016"
output: html_document
---
```{r setup, cache = F, echo = F, message = F, warning = F, tidy = F}
knitr::opts_chunk$set(message = F, error = F, warning = F, comment = NA, cache=TRUE, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
```
# Getting and Preprocessing Data
```{r}
data2 <- read.csv("./March_Madness_data.csv", header = T, sep = ",")
class(data2)
data2 <- data.table(data2)
library(data.table)
library(dplyr)
library(caret)
```
### Break data into team 1 and 2 sets
```{r}
madness_team1 <- data2[,.(season, team1_id, team1_fg2pct, team1_fg3pct,
team1_ftpct, team1_blockpct, team1_ap_final)]
madness_team2 <- data2[,.(season, team2_id, team2_fg2pct, team2_fg3pct,
team2_ftpct, team2_blockpct, team2_ap_final)]
```
### Replace all NA values with 0 in the ap_finAL rank. The only relevant ranks
### are from 1 to 25
```{r}
madness_team1$team1_ap_final <- replace(madness_team1$team1_ap_final,
is.na(madness_team1$team1_ap_final), 0)
madness_team2$team2_ap_final <- replace(madness_team2$team2_ap_final,
is.na(madness_team2$team2_ap_final), 0)
```
### Filter out teams that failed to make the rank
```{r}
team1_top25 <- madness_team1 %>%
filter(team1_ap_final >= 1)
team2_top25 <- madness_team2 %>%
filter(team2_ap_final >= 1)
```
### rename team1_id and team2_id to team_id and merge both datasets
```{r}
setnames(team1_top25, old = c('team1_id', 'team1_fg2pct', 'team1_fg3pct',
'team1_ftpct', 'team1_blockpct', 'team1_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
setnames(team2_top25, old = c('team2_id', 'team2_fg2pct', 'team2_fg3pct',
'team2_ftpct', 'team2_blockpct', 'team2_ap_final'),
new = c('team_id', 'fg2pct', 'fg3pct',
'ftpct', 'blockpct', 'ranking'))
top25 <- rbind(team1_top25, team2_top25)
```
### group the data table by year and ensure there is no duplicate data
```{r}
annual <- top25 %>%
group_by(season, team_id)%>%
distinct(ranking, fg2pct, fg3pct,
ftpct, blockpct) %>%
mutate(avg_shooting_percentage = (fg2pct + fg3pct + ftpct)/3)
```
##  Including Plots
### plot 1 to have a visualization of team performance
```{r plot1, echo=FALSE}
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(annual, aes(x = season, y = team_id))+
geom_point(aes(color=factor(ranking)))
plot1
```
### plot 2 to have a visualization of team performance in shooting average
```{r plot2, echo=FALSE}
plot2 <- ggplot(annual, aes(x = avg_shooting_percentage, y = team_id))+
geom_point(aes(color=factor(ranking)))
plot2
```
# modeling
```{r model, echo=FALSE}
annual2 <- annual[,c('team_id', 'ranking', 'season',
'avg_shooting_percentage', 'blockpct')]
annual2$season <- as.factor(annual2$season)
annual2$ranking <- as.factor(annual2$ranking)
preProcValues <- preProcess(annual2, method = c("center", "scale"))
building <- predict(preProcValues, annual2)
inTrain <- createDataPartition(y=building$ranking, p=0.7, list=FALSE)
training <- building[inTrain,]; testing <- building[-inTrain,]
require(randomForest);
set.seed(4400)
mod1 <- train(ranking ~.,method="rf",data=training, metric = "Accuracy",
trControl = trainControl(method = "cv"), number=5)
mod2 <- train(ranking ~.,method="rpart",data=training)
mod3 <- train(ranking ~.,method="gbm",data=training)
